{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nlet userSelectedDate;\nconst button = document.querySelector('button[data-start]');\nconst input = document.querySelector('input#datetime-picker');\n\nbutton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const currentDate = new Date();\n    const selectedDate = selectedDates[0];\n    const isValid = selectedDate > currentDate;\n    button.disabled = !isValid;\n\n    console.log(selectedDate);\n    console.log(currentDate);\n\n    if (isValid) {\n      userSelectedDate = selectedDate.getTime();\n    } else {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n    }\n  },\n};\n\nflatpickr('input#datetime-picker', options);\n\nbutton.addEventListener('click', () => {\n  button.disabled = true;\n  input.disabled = true;\n  const timerId = setInterval(() => {\n    const now = Date.now();\n    const deltaTime = userSelectedDate - now;\n\n    if (deltaTime <= 0) {\n      clearInterval(timerId);\n      button.disabled = false;\n      input.disabled = false;\n      return;\n    }\n\n    updateTimerDisplay(convertMs(deltaTime));\n  }, 1000);\n});\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  document.querySelector('span[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('span[data-hours]').textContent =\n    addLeadingZero(hours);\n  document.querySelector('span[data-minutes]').textContent =\n    addLeadingZero(minutes);\n  document.querySelector('span[data-seconds]').textContent =\n    addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["userSelectedDate","button","input","options","selectedDates","currentDate","selectedDate","isValid","iziToast","flatpickr","timerId","now","deltaTime","updateTimerDisplay","convertMs","days","hours","minutes","seconds","addLeadingZero","value","ms"],"mappings":"0FAKA,IAAIA,EACJ,MAAMC,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAQ,SAAS,cAAc,uBAAuB,EAE5DD,EAAO,SAAW,GAElB,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAc,IAAI,KAClBC,EAAeF,EAAc,CAAC,EAC9BG,EAAUD,EAAeD,EAC/BJ,EAAO,SAAW,CAACM,EAEnB,QAAQ,IAAID,CAAY,EACxB,QAAQ,IAAID,CAAW,EAEnBE,EACFP,EAAmBM,EAAa,UAEhCE,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,UAClB,CAAO,CAEJ,CACH,EAEAC,EAAU,wBAAyBN,CAAO,EAE1CF,EAAO,iBAAiB,QAAS,IAAM,CACrCA,EAAO,SAAW,GAClBC,EAAM,SAAW,GACjB,MAAMQ,EAAU,YAAY,IAAM,CAChC,MAAMC,EAAM,KAAK,MACXC,EAAYZ,EAAmBW,EAErC,GAAIC,GAAa,EAAG,CAClB,cAAcF,CAAO,EACrBT,EAAO,SAAW,GAClBC,EAAM,SAAW,GACjB,MACD,CAEDW,EAAmBC,EAAUF,CAAS,CAAC,CACxC,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAmB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7D,SAAS,cAAc,iBAAiB,EAAE,YAAcC,EAAeJ,CAAI,EAC3E,SAAS,cAAc,kBAAkB,EAAE,YACzCI,EAAeH,CAAK,EACtB,SAAS,cAAc,oBAAoB,EAAE,YAC3CG,EAAeF,CAAO,EACxB,SAAS,cAAc,oBAAoB,EAAE,YAC3CE,EAAeD,CAAO,CAC1B,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASN,EAAUO,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}